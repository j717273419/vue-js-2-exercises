<html>

<head>
    <script src="https://unpkg.com/vue@2.6.12/dist/vue.js"></script>
    <title>Vue Component 使用$emit从子组件触发父组件的事件</title>
</head>

<body>
    <div>
        <h4>Vue Component 使用$emit从子组件触发父组件的事件</h4>
        <hr>
        <div id="app">
            <div v-bind:style="{fontSize:pFontSize+'em'}">
                <vue-call-parent v-on:enlarge-text="pFontSize+=0.1">
                </vue-call-parent>
            </div>
            <hr>
            <h4>Vue Component 在vue.js 2中，父组件是在一个v-for中绑定了多个子组件，那在子组件input控件中如何更新父组件中的值</h4>
            <div v-for="(item, index) in items" :key="index">
                <vue-call-parent2 :item="item" :index="index" v-on:update-item="updateItem"></vue-call-parent2>
            </div>
            <hr>
            <h4>Vue Component 在vue.js 2中，父组件是在一个v-for中绑定了多个子组件，那在子组件div控件中如何更新父组件中的值</h4>
            <div v-for="(item, index) in items2" :key="index">
                <vue-call-parent-div :item="item" :index="index" v-on:update-item-child="updateItemChild"></vue-call-parent-div>
            </div>
        </div>
    </div>

    <script>
        Vue.component('vue-call-parent', {
            data: function () {
                return {
                    count: 0,
                    content: '深入理解vue中的emit'
                }
            },
            template: '<div><p>vue子组件:{{content}}</p><button v-on:click="$emit(\'enlarge-text\')">Enlarge text</button></div>',
            methods: {

            }
        })

        Vue.component('vue-call-parent2', {
            props: ['item', 'index'],
            template: '<div> <input type="text" v-model="item.value" @input="updateItemChild" /></div>',
            methods: {
                updateItemChild() {
                    this.$emit('update-item', this.item, this.index);
                }
            }
        })

        Vue.component('vue-call-parent-div', {
            props: ['item', 'index'],
            template: '<div><div contenteditable="true" v-model="item.value" @input="updateItemChild">{{item.value}}</div></div>',
            methods: {
                updateItemChild() {
                    this.$emit('update-item-child', this.item, this.index);
                }
            }
        })

        var vm = new Vue({
            el: '#app',
            data: {
                pFontSize: 1,
                items: [
                    { value: 'Item 1' },
                    { value: 'Item 2' },
                    { value: 'Item 3' }
                ],
                items2: [
                    { value: 'Item 12' },
                    { value: 'Item 22' },
                    { value: 'Item 32' }
                ]
            },
            methods: {
                updateItem(item, index) {
                    this.items[index] = item;
                },                
                updateItemChild(item, index) {
                    this.items2[index] = item;
                },
            }
        })
    </script>
</body>

</html>