<html>
  <head>
    <script src="https://unpkg.com/vue@2.6.14/dist/vue.js"></script>
    <script src="https://unpkg.com/vue-router@3.6.5/dist/vue-router.min.js"></script>
  </head>
  <body>
    <div id="app">
      <h1>Hello Vue Router</h1>
      <p>
        <!-- 使用 router-link 组件来导航. -->
        <!-- 通过传入 `to` 属性指定链接. -->
        <!-- <router-link> 默认会被渲染成一个 `<a>` 标签 -->
        <router-link to="/foo">Go to Foo</router-link>
        <br />
        <router-link to="/foo/kkk">Go to Foo</router-link>
        <br />
        <router-link to="/bar">Go to Bar</router-link>
        <br />
        <router-link to="/bar?abcd">Go to Bar ?abcd</router-link>
        <br />
        <router-link to="/bar?a=a1&b=b2&c=kkk&d="
          >Go to Bar ?a=a1&b=b2&c=kkk&d=</router-link
        >
      </p>
      <!-- 路由出口 -->
      <!-- 路由匹配到的组件将渲染在这里 -->
      <router-view></router-view>
<hr>
<h6>$route:{{$route}}</h6>

      <br />
      <em>参考 https://router.vuejs.org/zh/guide/essentials/dynamic-matching.html</em>
      具体的router信息，可以在vue dev tools中查看
    </div>

    <script>
      const Foo = { template: "<div>foo $route.params:{{$route.params}} $route.params.k:{{$route.params.k}}</div>" };
      const Bar = {
        template:
          "<div>$route.path: {{$route.path}} $route.query: {{$route.query}}</div>",
      };

      const routes = [
        { path: "/foo", component: Foo },
        { path: "/foo/:k", component: Foo },
        { path: "/bar", component: Bar },
      ];

      // 3. 创建 router 实例，然后传 `routes` 配置
      // 你还可以传别的配置参数, 不过先这么简单着吧。
      const router = new VueRouter({
        routes, // (缩写) 相当于 routes: routes
      });

      const app = new Vue({
        router,
      }).$mount("#app");
    </script>
  </body>
</html>
