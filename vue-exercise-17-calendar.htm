<html>

<head>
  <script src="https://unpkg.com/vue@2.6.14/dist/vue.js"></script>

</head>
<style>
  label {
    -webkit-user-select: none;
    /* Safari */
    -moz-user-select: none;
    /* Firefox */
    -ms-user-select: none;
    /* IE 10+ */
    user-select: none;
  }
</style>

<body>

  <div id="app">
    <h1>Calendar</h1>
    <p>{{ isChecked }}</p>
    <input type="checkbox" id="cbxPermission" v-model="isChecked" />
    <label for="cbxPermission">分配权限</label>
    <br>
    <h1>使用复选框,单个，绑定1和0</h1>
    <p>{{ hasChecked }}</p>
    <input type="checkbox" id="cbxPermission2" v-model="hasChecked" :true-value="1" :false-value="0" />
    <label for="cbxPermission2">分配权限2</label>
    <br>
    <p>
      这个demo展示了4个功能点，
    </p>
    <p>1是如何在vue中使用div双向绑定数据</p>
    <p>2是如何结合checkbox和label，实现点击复选框文字时，也能实现选中效果，就是for对应checkbox中的id</p>
    <p>3是如何设置文本不被选中，就是添加一段css，user-select: none</p>
    <p>4是如何设置文本不被选中，就是添加一段css，user-select: none</p>
    <hr>
  </div>

  <script>
    var s = new Vue({
      el: '#app',
      data: {
        isChecked: false,
        hasChecked: 0,
        userPermission: [
          {
            hasCreate: false,
            hasRead: true,
            hasDelete: false,
          },
          {
            hasCreate: true,
            hasRead: true,
            hasDelete: true,
          },
          {
            hasCreate: false,
            hasRead: false,
            hasDelete: false,
          },
        ],
      },
      methods: {
        handlePermission: function () {
          this.isChecked = !this.isChecked
        }
      },
    })
  </script>
</body>

</html>